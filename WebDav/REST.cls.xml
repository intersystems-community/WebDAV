<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WebDav.REST">
<Description>
WebDAV Server Currently serves physical directory structure.</Description>
<Super>WebDav.AbstractREST,WebDav.Utils.XML</Super>
<TimeCreated>64370,45626.334444</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
   <!-- IMPLEMENTED -->
   <Route Url="(.*)" Method="PROPFIND" Call="PROPFIND"/>
   <Route Url="(.*)" Method="GET" Call="GET"/>
   <Route Url="(.*)" Method="PUT" Call="PUT"/>
   <Route Url="(.*)" Method="DELETE" Call="DELETE"/>
   <Route Url="(.*)" Method="MOVE" Call="MOVE"/>
   <Route Url="(.*)" Method="MKCOL" Call="MKCOL"/>
   
   <!-- 200 OK -->
   <Route Url="(.*)" Method="HEAD" Call="HEAD"/>
   <Route Url="(.*)" Method="PROPPATCH" Call="PROPPATCH"/>
   <Route Url="(.*)" Method="LOCK" Call="LOCK"/>
   <Route Url="(.*)" Method="UNLOCK" Call="UNLOCK"/>
   
   
   <!-- UNIMPLEMENTED -->
   <Route Url="(.*)" Method="POST" Call="POST"/>
   <Route Url="(.*)" Method="TRACE" Call="TRACE"/>
   <Route Url="(.*)" Method="COPY" Call="COPY"/>
   <Route Url="(.*)" Method="ORDERPATCH" Call="ORDERPATCH"/>
 </Routes>
]]></Data>
</XData>

<Method name="href2path">
<Description>
Convert request href into physical path</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $$$isWINDOWS {
		set path = @..#FOLDER _ $tr(href,"/","\")
	} else {
		set path = @..#FOLDER _ href
	}
	return path
]]></Implementation>
</Method>

<Method name="isCollection">
<Description>
Check if requested object is a directory or a file</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ##class(%File).DirectoryExists(..href2path(href))
]]></Implementation>
</Method>

<Method name="PROPFIND">
<Description>
PROPFIND request is used to retrieve properties, stored as XML, from a web resource.
It is also overloaded to allow one to retrieve the collection structure (a.k.a. directory hierarchy) of a remote system.
w ##class(WebDav.REST).PROPFIND()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	
	set path = ..href2path(href)
	//do ##class(WebDav.Log).add("PROPFIND", href, path, ##class(%File).Exists(path))
	if ##class(%File).Exists(path) {
		
		if $isobject($g(%request)) {
			set %response.Status = ..#HTTP207MULTISTATUS
			set depth = ..getHeader("DEPTH", 0)				
		} else {
			set depth = 1
		}
		
		set isCollection = ..isCollection(href)
		set size = $case(isCollection, $$$YES:0, :##class(%File).GetFileSize(path))
			
		set multi = ##class(WebDav.XML.multistatus).%New()
		do multi.response.Insert(..createPROPFIND(href, isCollection, size))
		
		if isCollection,depth {		
			#dim rs As %ResultSet = ##class(%File).FileSetFunc(path)

			while (rs.%Next()) {
				set path = rs.Name		
				set name = rs.ItemName
				set size =rs.Size
				set createdDate = rs.DateCreated
				set modifiedDate = rs.DateModified
				set type = rs.Type
				set isCollection = $case(type, "F":$$$NO, "D":$$$YES, :$$$NO)
					
				do multi.response.Insert(..createPROPFIND(href _ "/" _ name, isCollection, size, createdDate, modifiedDate))
			}
		}
		
		set sc = ..writeXML(multi)

	} else {
		set %response.Status =  ..#HTTP404NOTFOUND
		set sc = $$$OK
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GET">
<Description>
Retrieve file contents</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	set path = ..href2path(href)
	set sc = ..serve(path)
	do ##class(WebDav.Log).add(path, sc)
	quit sc
]]></Implementation>
</Method>

<Method name="PROPPATCH">
<Description>
PROPPATCH is used to update object properties</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="UNLOCK">
<Description>
Reverse to LOCK, UNLOCK removes lock from an object </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="MKCOL">
<Description>
MaKeCOLlection creates a directory</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<Implementation><![CDATA[
	set path = ..href2path(href)
	set result = ##class(%File).CreateDirectoryChain(path, .return)
	do ##class(WebDav.Log).add(path, result, return)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="MOVE">
<Description>
Moves object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	
	set path = ..href2path(href)
	
	set dest = ..getHeader("DESTINATION")
	set destHref = $p(dest, ..getBase(), 2, *)
	set destPath =..href2path(destHref)
	
	/// If a resource exists at the destination and the Overwrite header is "T", then prior to performing the move, 
	/// the server MUST perform a DELETE with "Depth: infinity" on the destination resource. 
	/// If the Overwrite header is set to "F", then the operation will fail.
	/// No one sends that header
	if ##class(%File).Exists(destPath),..securityCheck(destHref, "DELETE") {
		do ..DELETE(destHref)
	}

	set result = ##class(%File).Rename(path, destPath, .return)
	set:result=$$$NO sc = $$$ERROR($$$GeneralError, $$$FormatText("Renaiming file %0 into %1 failed, reason: %2", path, destPath, return))
	do ##class(WebDav.Log).add(path, sc, destPath)
	quit sc
]]></Implementation>
</Method>

<Method name="DELETE">
<Description>
Deletes object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set:href="" href = $p(..getHeader("DESTINATION"), ..getBase(), 2, *)
	set path = ..href2path(href)
	if ((href="")||(href="/")) {
		do ##class(WebDav.Log).add(path, $$$NO)
		return $$$OK
	}
	
	if ..isCollection(href) {
		set sc = ##class(%File).RemoveDirectoryTree(path)
	} else {
		set sc = ##class(%File).Delete(path)
	}
	
	do ##class(WebDav.Log).add(path, sc)
	
	quit sc
]]></Implementation>
</Method>

<Method name="HEAD">
<Description>
Called before GET to receive information about a file</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	
	set path = ..href2path(href)

	set %response.ContentType = ..getFileType(path)
	set %response.ContentLength = ##class(%File).GetFileSize(href)
	//do %response.SetHeader("Accept-Ranges","bytes")
	//do %response.SetHeader("Last-Modified","Mon, 27 Mar 2017 11:03:16 GMT")
	//do %response.SetHeader("ETag","""a68375bce9a6d21:0""")

	quit $$$OK
]]></Implementation>
</Method>

<Method name="PUT">
<Description>
Update file contents. Always completely rewrites the file </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	set path = ..href2path(href)
	if $isobject(%request.Content) {		
		set file = ##class(%Stream.FileBinary).%New()
		do file.LinkToFile(path)
		set sc = file.CopyFromAndSave(%request.Content)
	} else {
		// Create empty file
		set file = ##class(%File).%New(path)
		do file.Open("WSN")
		set sc = file.%Save()
	}
	do ##class(WebDav.Log).add(path, sc)
	quit sc
]]></Implementation>
</Method>

<Method name="LOCK">
<Description>
Acquire a lock on a file
w ##class(WebDav.REST).LOCK()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>href</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set token = "opaquelocktoken:" _ $System.Util.CreateGUID()
	do %response.SetHeader("Lock-Token", token)
	set prop = ##class(WebDav.Utils.XML).createLOCK(href,  token)	
	quit ..writeXML(prop)
]]></Implementation>
</Method>
</Class>
</Export>
